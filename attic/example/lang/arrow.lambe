use core
use product

trait Arrow ((~>): * -> * -> *) with Category (~>) {
    sig arrow : forall a b.(a -> b) -> a ~> b
    sig (>>>) : forall a b c.self -> b ~> c -> c ~> d for a ~> b
    sig first : forall a b c.a ~> b -> (a * c) ~> (b * c)
}

trait ArrowExtension ((~>): * -> * -> *) with Arrow (~>) {
    sig second = forall a b c.a ~> b -> (c * a) ~> (c * b)
    def second f = arr swap >>> (first f) >>> (arr swap)

    sig (***) : forall a b c d.self -> c ~> d -> (a * c) ~> (b * d) for a ~> b
    def (***) g = first self >>> $ second g

    sig (&&&) : forall a b c.self -> a ~> c -> a ~> (b * c) for a ~> b
    def (&&&) g = arrow duplicate >>> $ self *** g

    sig lift2 : forall a b c d.self -> d ~> a -> d ~> b -> d ~> c for a -> b -> c
    def lift2 f g = f &&& g >>> $ arrow { ab -> self ab.fst ab.snd }
}

trait ArrowZero ((~>): * -> * -> *) with Arrow (~>) {
    sig neutral : forall a b. a ~> b
}

trait ArrowPlus ((~>): * -> * -> *) with ArrowZero (~>) {
    sig combine : forall a b. self -> a ~> b -> a ~> b for a ~> b
    sig (<+>) : forall a b. self -> a ~> b -> a ~> b for a ~> b
    sig (<+>) = self combine
}

trait Arrow_from_monad {
    type Kleisli (m:* -> *) a b = a -> m b

    impl forall (m:* -> *).Arrow (Kleisli m) with Monad m {
        def arrow f = { b -> return (f b) }
        def (>>>) g = { b -> self b >>= g.k }
        def first f = { ac -> f ac.fst >>= { c -> return (c,ac.snd) } }
    }

    impl forall (m:* -> *).ArrowExtension (Kleisli m)
}

trait Arrow_from_function {
    impl forall (m:* -> *).Arrow (->) {
        def arrow f = f
        def (>>>) g = f @> g
        def first f = { ac -> (f ac.fst),ac.snd }
    }

    impl ArrowExtension (->)
}