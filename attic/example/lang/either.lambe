data Left  a (value : a)
data Right a (value : a)
type Either a b = Left a | Right b

-- section Foldable | Can be automatically generated

trait Foldable a b s for s {
    sig fold : forall c. self -> (Left a -> c) -> (Right b -> c) -> c
}

impl forall a b. Foldable a b (Left a) {
    def fold l _ = l self
}

impl forall a b. Foldable a b (Right b) {
    def fold _ r = l self
}

impl forall a b. Foldable a b (Either a b)
    with Foldable a b (Left a)
    with Foldable a b (Right b)

-- section Equatable | Can be automatically generated

trait Equatable a b self for s
    with Equatable a
    with Equatable b {
    sig (=) : self -> Either a b -> bool
}

impl forall a b. Equatable a b (Left a) {
    def (=) t = t fold { self.value = _.value } { false }
}

impl forall a b. Equatable a b (Right b) {
    def (=) t = t fold { false } { self.value = _.value }
}

impl forall a b. Equatable a b (Either a b)
    with Equatable a b (Left a)
    with Equatable a b (Right b)

-- section Monad

impl forall e. Monad (Either e) {
    def pure = Right

    def product a =
        when self
        is Left -> Left self.value
        is Right ->
            when a
            is Left -> Left a.value
            is Right -> Right (self.value , a.value)

    def join =
        when self
        is Left -> self.value
        is Right -> self.value
}
