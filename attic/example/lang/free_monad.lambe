--{
  cite { http://comonad.com/reader/2011/free-monads-for-less/ }
  cite { http://okmij.org/ftp/Computation/free-monad.html }
}

data Pure a (value: a)
data Bind (f:* -> *) a (value : f (Free a))
type Free (f:* -> *) a = Pure a | Bind f a

impl forall (f:* -> *). Free f with Functor f {
    sig (>>=) : forall a b .self -> (a -> b) -> Free f b
    def (>>=) f =
        when self
        is Pure -> f self.value
        is Bind -> Bind (f >>= map self.value)
}

sig lift : forall (f:* -> *) a. f a -> Free f a with Functor f
def lift = Bind $ Pure map
