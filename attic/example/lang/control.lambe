trait Functor (f:* -> *) {
    sig map : forall a b. self -> f a -> f b for (a -> b)

    sig <$> : forall a b. self -> f a -> f b for (a -> b)
    def <$> = self map
}

trait Applicative (f:* -> *) with Functor f {
    sig pure : forall a. a -> f a
    sig product : forall a b. self -> f b -> f (a * b) for f a

    sig (,) : forall a b. self -> f b -> f (a * b) for f a
    def (,) = self product

    sig (<*>) : forall a b. self -> f a -> f b for f (a -> b)
    def (<*>) a = { _.fst _.snd } <$> (self,a)

    sig (<**>) : forall a b. self -> f (a -> b) -> f b for f a
    def (<**>) f = f <*> self
}

trait Monad (f:* -> *) with Applicative f {
    sig join : forall a. self -> f a for f (f a)

    sig returns : forall a. a -> f a
    def returns = pure

    sig bind : forall a b. self -> (a -> f b) -> f b for f a
    def bind f = f map self join

    sig (>>=) : forall a b. self -> (a -> f b) -> f b for f a
    def (>>=) = self bind
}

trait Kleisli (f:* -> *) with Monad f {
    sig (>=>) : forall a b c. self -> (b -> f c) -> (a -> f c) for a -> f b
    def (>=>) b = self |> $ g =<<
}
