use listf

type List a = ListF a (List a)
type Cons a = ConsF a (List a)
type Nil    = NilF

-- section Constructor

impl forall a. List a {
    trait Builder a {
        sig (]) : List a
        sig (,) : a -> ListBuilder a
    }

    data ([) a { value:a }

    impl forall a. Builder a for ([) a {
        def (]) = self.value::Nil
        def (,) a = ListBuilder { (self.value::a::_) }
    }

    data ListBuilder a { value : List a -> List a }

    impl forall a. Builder a for ListBuilder a {
        def (]) = self.value
        def (,) a = ListBuilder { self.value (a::_) }
    }
}

impl Constructor

-- section Foldable

trait forall a. Foldable a s for s {
    sig fold : forall b. self -> (Nil -> b) -> (Cons a -> b) -> b
}

impl forall a. Foldable a Nil {
    def fold n _ = n self
}

impl forall a. Foldable a (Cons a) {
    def fold n c = c self
}

impl forall a. Foldable a (List a)
    with Foldable a Nil
    with Foldable a (Cons a)

-- section Selectable

trait Foldable a s for s {
    sig fold : forall b. self -> (Nil -> b) -> (Cons a -> b) -> b
}

impl forall a. Foldable a Nil {
    def fold n _ = n self
}

impl forall a. Foldable a (Cons a) {
    def fold n c = c self
}

impl forall a. Foldable a (List a)
    with Foldable a Nil
    with Foldable a (Cons a)

-- section Equatable

trait Equatable a s for s with Equatable a with Foldable a (List a) {
    sig (=) : self -> List a -> bool
}

impl Equatable a Nil {
    def (=) l = l fold { true } { false }
}

impl Equatable a (Cons a) {
    def (=) l = self.(l fold { false } { (head = l.head) && (tail = l.tail) })
}

impl Equatable a (List a)
    with Equatable a Nil
    with Equatable a (Cons a)

-- section Monoid

impl algebraic

impl forall a. SemiGroup (List a) with Foldable a (List a) {
    def compose l =
        self fold { l } { self with tail = self.tail compose l }
}

impl forall a. Monoid (List a) {
    def neutral = []
}

-- operation

trait Operation a for List a {
    sig (++) : forall a. self -> self -> self
}

impl forall a. Operation a {
    def (++) = self compose
}

-- section Monad

impl forall a. Functor List with Foldable a (List a) {
    def map l =
        l fold { Nil } { self _.head :: $ self map _.tail }
}

impl forall a. Applicative List with Foldable a (List a) {
    def pure a = [a]

    def product f =
        self fold { Nil } { _.tail <*> $ f map _.head }
}

impl forall a. Monad List with Foldable a (List a) {
    def join =
        self fold { nil } { _.head ++ $ _.tail join }
}

