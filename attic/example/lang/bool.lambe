--{
  This boolean trait provides:
  - Foldable Bool
  - operation
}

use lazy

data True
data False
type Bool = True | False

-- section Foldable

trait Foldable s for s {
    sig fold : forall b. self -> b -> b -> b

    sig fold : forall b. self -> b -> b -> b for unit -> s
    def fold s b1 b2 = self () fold b1 b1
}

impl Foldable True {
    def fold t _ = t
}

impl Foldable False {
    def fold _ f = f
}

impl Foldable Bool
    with Foldable True
    with Foldable False

trait Syntax {
    syntax if <p> then <a> else <b> { p fold { a } { b } () }
}

-- The lazy bool implementation

type bool = Lazy Bool

impl bool with Foldable Bool {
    sig true : Lazy True
    def true = lazy True

    sig false : Lazy False
    def false = lazy False

    sig (||) : self -> self -> self
    def (||) b = { self fold true b }

    sig (&&) : self -> self -> self
    def (&&) b = { self fold b false }

    sig not : self -> self
    def not = { self fold false true }

    sig (=>) : self -> self -> self
    def (=>) b = self not || b

    sig eval : self -> Bool
    def eval = self run
}
