kind (->) = type -> type -> type

sig id : forall a. a -> a
def id a = a

sig (<|) : forall a b. self -> a -> b for a -> b
def (<|) = id self

sig (|>) : forall a b. self -> (a -> b) -> b for a
def (|>) f = f a

sig ($) : forall a b c. self -> (a -> b) -> a -> c for b -> c
def ($) = self @

sig (@) : forall a b c. self -> (a -> b) -> a -> c for b -> c
def (@) f a = self (f a)

sig (@>) : forall a b c. self -> (b -> c) -> a -> c for a -> b
def (@>) f = f @ self

type (#>) a b = self -> b for a

sig (::) : forall a b.(a #> b) -> (a -> b)
def (::) f a = a f

sig (#$) : forall a b c.(a #> b) -> (b #> c) -> (a -> c)
def (#$) f g = g #@ f

sig (#@) : forall a b c.(b #> c) -> (a #> b) -> (a -> c)
def (#@) f g a =  a g f

--{
    ```
    trait T {
        sig m : forall a b.a #> a -> b
        def m f = f self
    }

    let impl T in
    let e = :: m in
        e 1 { _ + 1 }
    ```
}
