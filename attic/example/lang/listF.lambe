data Nil
data Cons a l (head : a) (tail : l)

sig ([]) : Nil
def ([]) = Nil

sig (::) : forall a l.a -> l -> Cons a l
def (::) = Cons

type ListF a l = Nil | Cons a l

impl forall a.Functor (ListF a) {
    def map e =
        when e
        is Nil  -> e
        is Cons -> Cons (self e.left) e.right
}
