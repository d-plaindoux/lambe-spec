type (*) a b = data (,) (fst : a) (snd : b)

impl forall a b. a * b {
    sig swap : a * b -> b * a
    def swap ab = ab.snd , ab.fst

    sig duplicate : a -> a * a
    def duplicate a = a , a

    sig fst : self -> a
    def fst = self.fst

    sig snd : self -> b
    def snd = self.snd

    sig zip : forall c d. self -> c * d -> (a * c) * (b * d)
    def zip p = (self.fst , p.fst), (self.snd , p.snd)
}
