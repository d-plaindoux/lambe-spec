--{
 Expression in this example shows how an Expression language can be design step
 by step introducing basic constructions like *Number* and *Plus*.
}

use int

trait Eval a for a {
    sig eval : self -> int
}

-- Defining the number and its evaluation

data Number (value : int)

impl Eval self for Number {
    def eval = self.value
}

-- Defining the addition and its evaluation

data Plus a (left: a) (right: a)

impl forall a. Eval self for Plus a with Eval a {
    def eval = (self.left eval) + (self.right eval)
}

-- Defining the Expression Level 1

type Exp e = Number | Plus e

type ExpL1 = Exp ExpL1

impl Eval self for ExpL1
    with Eval Number
    with Eval (Plus self)

-- Defining the multiplication and its evaluation

data Mult a (left: a) (right: a)

impl forall a. Eval self for Mult a with Eval a {
    def eval = (self.left eval) * (self.right eval)
}

-- Defining the Expression Level 2

type ExpL2 = Exp ExpL2 | Mult ExpL2

impl Eval self for ExpL2
    with Eval Number
    with Eval (Plus self)
    with Eval (Mult self)
