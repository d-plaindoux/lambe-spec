trait Reader a {
    kind t = * -> * -- Abstract type

    data Source (s: t a) (pos: int*int*int)

    sig new : t a -> Source
    def new s = Source s (0,0,0)

    sig next : self -> Option a * self for Source a
}

--{
    Example where `Source` is incarnated by a `List`
}

impl forall a. Reader a {
    type t = List

    def next =
        when self.s
        is Nil  -> None, self
        is Cons -> Some self.head, (Source self.tail self.pos)
}

let source = (Reader int).Source in
